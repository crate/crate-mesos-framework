plugins {
  id "eu.appsatori.fatjar" version "0.3"
}

apply plugin: 'java'
apply plugin: 'idea'

sourceCompatibility = 1.7
targetCompatibility = 1.7

group = 'io.crate'

task wrapper(type: Wrapper) {
    gradleVersion = '2.13'
}

ext {
    // crate
    crateClientVersion="0.54.8"

    // mesos
    mesosVersion="0.28.1"
    minimesosVersion = "0.9.0"
    awaitilityVersion = "1.7.0"

    // testing
    junitVersion="4.12"
    mockitoVersion="1.10.19"
    hamcrestAllVersion="1.3"

    // jersey
    jerseyContainerGrizzly2Version="2.16"
    jerseyMediaJsonJackson="2.16"

    // apache
    apacheHttpClientVersion="4.4"
    apacheCommonIOVersion="1.3.2"

    // utils
    log4jVersion="1.7.12"
    jetbrainsAnnotationsVersion="13.0"
    jcommanderVersion="1.30"
    guavaVersion="0.19.0"
}

repositories {
    jcenter()
    maven { url "https://jitpack.io" }
}

dependencies {
    compile "com.jayway.awaitility:awaitility:$awaitilityVersion"
    compile "org.apache.mesos:mesos:$mesosVersion"
    compile "com.github.ContainerSolutions:minimesos:$minimesosVersion"
    compile "org.glassfish.jersey.containers:jersey-container-grizzly2-http:$jerseyContainerGrizzly2Version"
    compile "org.glassfish.jersey.media:jersey-media-json-jackson:$jerseyMediaJsonJackson"
    compile "com.google.guava:guava:$guavaVersion"
    compile "com.beust:jcommander:$jcommanderVersion"
    compile "org.jetbrains:annotations:$jetbrainsAnnotationsVersion"
    compile "io.crate:crate-client:$crateClientVersion"
    compile "org.slf4j:slf4j-log4j12:$log4jVersion"
    compile "org.apache.httpcomponents:httpclient:$apacheHttpClientVersion"
    compile "org.apache.commons:commons-io:$apacheCommonIOVersion"
    testCompile "org.hamcrest:hamcrest-all:$hamcrestAllVersion"
    testCompile ("junit:junit:$junitVersion") {
        exclude group: 'org.hamcrest', module: 'hamcrest-core'
    }
    testCompile ("org.mockito:mockito-core:$mockitoVersion") {
        exclude group: 'org.hamcrest', module: 'hamcrest-core'
    }
}

test {
    testLogging {
        // Show that tests are run in the command-line output
        events 'started'
    }
}

task getVersion (dependsOn: 'classes') << {
    def stdout = new ByteArrayOutputStream()
    javaexec {
        classpath = sourceSets.main.runtimeClasspath
        main = 'io.crate.frameworks.mesos.Version'
        standardOutput = stdout
    }

    ext.gitTag = "git describe".execute().in.text.trim()
    ext.version = stdout.toString().trim().split(" ")[1].replace(',','').trim()

    if (gradle.taskGraph.hasTask(release)) {
        assert gitTag == version, "Version conflict: git tag: '" + gitTag + "' does not match release version: '" + version + "'"
    } else if (gradle.taskGraph.hasTask(snapshotRelease)) {
	assert version.endsWith("-SNAPSHOT"), "Version conflict: version does not end with -SNAPSHOT"
	version = version + "-" + "git rev-parse --short HEAD".execute().in.text.trim()
    }

    logger.quiet("----------------------------")
    logger.quiet(" gitTag:  " + gitTag)
    logger.quiet(" version: " + version)
    logger.quiet("----------------------------")

    project.version = version
}

task snapshotRelease(dependsOn: 'fatJar') << {
    logger.quiet("Snapshot Release: " + project.name + " (" + getVersion.version + ")");
}

task release(dependsOn: 'fatJar') << {
    logger.quiet("Release: " + project.name + " (" + getVersion.version + ")");
}

fatJar {
    dependsOn getVersion
    doFirst {
	manifest {
	    attributes 'Implementation-Version': getVersion.version
	}
    }
    manifest {
	attributes 'Main-Class': 'io.crate.frameworks.mesos.Main',
	  'Implementation-Title': 'Crate Mesos Framework',
	  'Built-Date': new Date(),
	  'Built-JDK': System.getProperty('java.version'),
	  'Built-Gradle': gradle.gradleVersion
    }
}

fatJarPrepareFiles {
    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
}

def jvmTestFlags = ['-ea']

idea {
    project {
        languageLevel = 'JDK_1_7'

        ipr {
            withXml { provider ->
                def node = provider.asNode()
                def copyrightManager = node.component.find { it.'@name' == 'CopyrightManager' }
                copyrightManager.@default = "CrateASL2"
                def aslCopyright = copyrightManager.copyright.find { it.option.find { it.@name == "myName" }?.@value == "CrateASL2" }
                if (aslCopyright == null) {
                    copyrightManager.append(new XmlParser().parse(file("copyright.xml")))
                }
            }
        }
    }
    workspace {
        iws.withXml { xmlFile ->
            def runManager = xmlFile.asNode().component.find { it.@name == 'RunManager' }

            // enable assertions for junit tests
            def junitDefaults = runManager.configuration.find { it.@default == 'true' && it.@type == 'JUnit' }
            junitDefaults.option.find { it.@name == 'VM_PARAMETERS' }.replaceNode {
                option(name: 'VM_PARAMETERS', value: jvmTestFlags.join(' '))
            }
        }
    }
}
